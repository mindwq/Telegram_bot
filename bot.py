import os
import asyncpg
from datetime import datetime, timedelta
from datetime import datetime, date as date_class

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import requests
import time
import redis
from io import BytesIO
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
pool = None


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class MemoryStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_place = State()
    waiting_for_rating = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_custom_date = State()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
current_event_index = {}
current_memory_index = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∞
events_cache = {}
memories_cache = {}


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
# redis_client = redis.Redis(host='localhost', port=6379, db=0)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
async def init_db():
    global pool  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        pool = await asyncpg.create_pool(DATABASE_URL)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        async with pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS memories (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    date TEXT NOT NULL,
                    place TEXT,
                    rating INTEGER,
                    description TEXT,
                    photo_path TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            ''')

        print("–¢–∞–±–ª–∏—Ü–∞ 'memories' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        return pool
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        raise


# –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: Message, text: str = None):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ü–æ–µ—Ö–∞–ª–∏!"),
        types.KeyboardButton(text="–ù–∞ –ø–∞–º—è—Ç—å")
    )
    builder.row(types.KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è"))

    if text is None:
        text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è."

    await message.answer(
        text,
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await show_main_menu(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–µ—Ö–∞–ª–∏!"
@dp.message(F.text == "–ü–æ–µ—Ö–∞–ª–∏!")
async def ask_interests(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–ö–æ–Ω—Ü–µ—Ä—Ç—ã", callback_data="category_concert"),
        types.InlineKeyboardButton(text="–í—ã—Å—Ç–∞–≤–∫–∏", callback_data="category_exhibition"),
        types.InlineKeyboardButton(text="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="category_fun")
    )
    builder.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu"))

    await message.answer(
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=builder.as_markup()
    )

# –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è "–∫—ç—à–∞" –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_events_from_cache(user_id: int):
    events = events_cache.get(user_id)
    print(f"[DEBUG] Events in cache for user {user_id}: {len(events) if events else 0}")
    return events


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ KudaGo API
async def get_events(category: str, date_input: str):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    params = {
        'location': 'spb',
        'page_size': 20,  # –ë—ã–ª–æ 0 - —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ª—É—á–∞–ª–∏ 0 —Å–æ–±—ã—Ç–∏–π
        'lang': 'ru',
        'fields': 'id,title,place,price,images,site_url,description',  # –Ø–≤–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        'expand': 'place',  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
        'text_format': 'plain'  # –£–±–∏—Ä–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_map = {
        'concert': 'concert',
        'exhibition': 'exhibition',
        'fun': 'entertainment'
    }
    params['categories'] = category_map.get(category, 'all')

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
    try:
        if date_input == 'today':
            since = datetime.now()
            until = since + timedelta(days=1)
        elif date_input == 'tomorrow':
            since = datetime.now() + timedelta(days=1)
            until = since + timedelta(days=1)
        else:
            # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
            since = datetime.strptime(date_input, "%d.%m.%Y")
            until = since + timedelta(days=1)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        params['actual_since'] = int(since.timestamp())
        params['actual_until'] = int(until.timestamp())

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        response = requests.get(
            'https://kudago.com/public-api/v1.4/events/',
            params=params,
            timeout=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            print(f"API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return []
            
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not data.get('results'):
            print("API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
            return []
            
        return data['results']

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
async def show_event_card(chat_id: int, events: list, index: int):
    try:
        if index < 0 or index >= len(events):
            raise IndexError("Invalid event index")

        event = events[index]
        print(f"[DEBUG] Event structure: {event}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        title = event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞
        place_data = event.get('place', {})
        if isinstance(place_data, dict):
            place_name = place_data.get('name', '')
            address = place_data.get('address', '')
            place_text = f"{place_name}, {address}" if place_name else address
        else:
            place_text = str(place_data) if place_data else '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
        price_data = event.get('price', '')
        if isinstance(price_data, dict):
            price_text = price_data.get('name', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        else:
            price_text = str(price_data) if price_data else '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'

        url = event.get('site_url', 'https://kudago.com')
        
        text = (
            f"üéü <b>{title}</b>\n\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {place_text if place_text else '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}\n"
            f"üåê <b>–°–∞–π—Ç:</b> <a href='{url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = None
        images = event.get('images', [])
        if images and isinstance(images, list):
            first_image = images[0]
            if isinstance(first_image, dict):
                image_url = first_image.get('image')

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        builder = InlineKeyboardBuilder()
        if index > 0:
            builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"event_prev_{index}")
        if index < len(events) - 1:
            builder.button(text="–î–∞–ª—å—à–µ ‚ñ∂", callback_data=f"event_next_{index}")
        builder.button(text="üè† –ú–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if image_url:
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                response = requests.get(image_url)
                if response.status_code == 200:
                    photo = types.BufferedInputFile(response.content, filename="event.jpg")
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=text,
                        reply_markup=builder.as_markup(),
                        parse_mode='HTML'
                    )
                    return
            except Exception as e:
                print(f"[ERROR] Failed to send photo: {e}")

        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )

    except Exception as e:
        print(f"[ERROR] Failed to show event card: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏",
            reply_markup=types.ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category_"))
async def choose_date(callback: CallbackQuery):
    category = callback.data.split("_")[1]

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_today_{category}"),
        types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_tomorrow_{category}")
    )
    builder.row(
        types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data=f"date_custom_{category}"),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_interests")
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("date_"))
async def handle_date_selection(callback: CallbackQuery,  state: FSMContext):
    print("[DEBUG] –í—ã–∑–≤–∞–Ω handle_date_selection")
    data = callback.data.split("_")
    date_type = data[1]
    category = data[2]

    if date_type == 'today':
        events = await get_events(category, 'today')
    elif date_type == 'tomorrow':
        events = await get_events(category, 'tomorrow')
    elif date_type == 'custom':
        await state.update_data(category=category)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        await state.set_state(MemoryStates.waiting_for_custom_date)
        return

    if not events:
        await callback.message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢")
        return

    user_id = callback.from_user.id
    events_cache[user_id] = events
    print(f"[DEBUG] Saved {len(events)} events to cache for user {user_id}")
    current_event_index[user_id] = 0
    await show_event_card(user_id, events, 0)

    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("date_custom_"))
async def handle_custom_date_input(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[2]
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await state.set_state(MemoryStates.waiting_for_custom_date)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
@dp.message(MemoryStates.waiting_for_custom_date)
async def process_custom_date(message: Message, state: FSMContext):
    try:
        date_str = message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
        data = await state.get_data()
        category = data.get('category')

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
        events = await get_events(category, date_str)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π

        if not events:
            await message.answer("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢")
            await state.clear()
            return

        user_id = message.from_user.id
        events_cache[user_id] = events
        
        current_event_index[user_id] = 0
        await show_event_card(user_id, events, 0)
        await state.clear()


    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
@dp.callback_query(F.data.startswith("event_"))
async def handle_event_navigation(callback: CallbackQuery):
    data = callback.data.split("_")
    direction = data[1]
    current_index = int(data[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ "–∫—ç—à–∞" (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
    events = await get_events_from_cache(user_id)
    if not events:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    if direction == 'prev':
        new_index = current_index - 1
    else:
        new_index = current_index + 1

    current_event_index[user_id] = new_index
    await callback.message.delete()
    await show_event_card(user_id, events, new_index)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –ø–∞–º—è—Ç—å"
@dp.message(F.text == "–ù–∞ –ø–∞–º—è—Ç—å")
async def start_memory_creation(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="–°–µ–≥–æ–¥–Ω—è", 
            callback_data="memory_date_today"
        ),
        types.InlineKeyboardButton(
            text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", 
            callback_data="memory_date_custom"
        )
    )
    builder.row(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥", 
        callback_data="main_menu"
    ))

    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MemoryStates.waiting_for_date)

@dp.callback_query(F.data == "memory_date_today")
async def handle_memory_date_today(callback: CallbackQuery, state: FSMContext):
    today = datetime.now().strftime("%d.%m.%Y")
    await state.update_data(date=today)
    await callback.message.answer("üèõ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞/–ª–æ–∫–∞—Ü–∏–∏:")
    await state.set_state(MemoryStates.waiting_for_place)
    await callback.message.delete()

@dp.callback_query(F.data == "memory_date_custom")
async def handle_memory_date_custom(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(MemoryStates.waiting_for_date)
    await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã –¥–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è

@dp.message(MemoryStates.waiting_for_date)
async def process_memory_date(message: Message, state: FSMContext):
    try:
        user_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        today = date_class.today()

        if user_date > today:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–µ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π.")
            return

        await state.update_data(date=user_date.strftime("%d.%m.%Y"))
        await message.answer("üèõ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞/–ª–æ–∫–∞—Ü–∏–∏:")
        await state.set_state(MemoryStates.waiting_for_place)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–∞ –¥–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(MemoryStates.waiting_for_place)
async def process_memory_place(message: Message, state: FSMContext):
    await state.update_data(place=message.text)

    builder = InlineKeyboardBuilder()
    for i in range(1, 11):
        builder.button(text=str(i), callback_data=f"rating_{i}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_date")

    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –¥–µ–Ω—å",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MemoryStates.waiting_for_rating)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("rating_"), MemoryStates.waiting_for_rating)
async def process_memory_rating(callback: CallbackQuery, state: FSMContext):
    try:
        rating = int(callback.data.split("_")[1])
        if 1 <= rating <= 10:
            await state.update_data(rating=rating)
            await callback.message.answer("üìù –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è:")
            await state.set_state(MemoryStates.waiting_for_description)
            await callback.message.delete()
        else:
            await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10")
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏")


@dp.callback_query(F.data == "skip_description", MemoryStates.waiting_for_description)
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description=None)

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")

    await callback.message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–Ω—è",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MemoryStates.waiting_for_photo)
    await callback.message.delete()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(MemoryStates.waiting_for_description)
async def process_memory_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")

    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–Ω—è",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MemoryStates.waiting_for_photo)


@dp.message(MemoryStates.waiting_for_photo)
async def process_memory_photo(message: Message, state: FSMContext):
    global pool

    data = await state.get_data()
    
    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ)
    if not message.photo:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    photo = message.photo[-1]
    photo_file = await bot.get_file(photo.file_id)
    photo_path = f"photos/{message.from_user.id}_{int(time.time())}.jpg"

    os.makedirs("photos", exist_ok=True)
    await bot.download_file(photo_file.file_path, photo_path)

    async with pool.acquire() as conn:
        await conn.execute(
            """INSERT INTO memories 
            (user_id, date, place, rating, description, photo_path) 
            VALUES ($1, $2, $3, $4, $5, $6)""",
            message.from_user.id,
            data.get('date'),
            data.get('place'),
            data.get('rating'),
            data.get('description'),
            photo_path
        )

    await message.answer("‚úÖ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å —Ñ–æ—Ç–æ!")
    await state.clear()
    await show_main_menu(message)

@dp.callback_query(F.data == "skip_photo", MemoryStates.waiting_for_photo)
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    global pool

    data = await state.get_data()

    async with pool.acquire() as conn:
        await conn.execute(
            """INSERT INTO memories 
            (user_id, date, place, rating, description) 
            VALUES ($1, $2, $3, $4, $5)""",
            callback.from_user.id,
            data.get('date'),
            data.get('place'),
            data.get('rating'),
            data.get('description')
        )

    await callback.message.answer("‚úÖ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ!")
    await state.clear()
    await show_main_menu(callback.message)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è"
@dp.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è")
async def show_history_periods(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="history_week"),
        types.InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="history_month")
    )
    builder.row(
        types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="history_custom"),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    )

    await message.answer(
        "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é?",
        reply_markup=builder.as_markup()
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pool)
async def get_memories(user_id: int, period: str = None, start_date: str = None, end_date: str = None):
    global pool

    query = "SELECT * FROM memories WHERE user_id = $1"
    params = [user_id]

    if period == 'week':
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=7)
        query += " AND TO_DATE(date, 'DD.MM.YYYY') BETWEEN $2 AND $3"
        params.extend([start_date, end_date])
    elif period == 'month':
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=30)
        query += " AND TO_DATE(date, 'DD.MM.YYYY') BETWEEN $2 AND $3"
        params.extend([start_date, end_date])
    elif start_date and end_date:
        query += " AND TO_DATE(date, 'DD.MM.YYYY') BETWEEN $2 AND $3"
        params.extend([start_date, end_date])

    query += " ORDER BY TO_DATE(date, 'DD.MM.YYYY') DESC"

    async with pool.acquire() as conn:
        return await conn.fetch(query, *params)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def show_memory_card(chat_id: int, memories: list, index: int):
    memory = memories[index]

    text = (
        f"üìÖ <b>–î–∞—Ç–∞:</b> {memory['date']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {memory['place'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {memory['rating'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {memory['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    builder = InlineKeyboardBuilder()
    if index > 0:
        builder.button(text="–ù–∞–∑–∞–¥", callback_data=f"memory_prev_{index}")
    if index < len(memories) - 1:
        builder.button(text="–î–∞–ª—å—à–µ", callback_data=f"memory_next_{index}")
    builder.button(text="–ú–µ–Ω—é", callback_data="main_menu")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if memory['photo_path'] and os.path.exists(memory['photo_path']):
        await bot.send_photo(
            chat_id=chat_id,
            photo=FSInputFile(memory['photo_path']),
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pool)
@dp.callback_query(F.data.startswith("history_"))
async def handle_history_period(callback: CallbackQuery, state: FSMContext):
    period = callback.data.split("_")[1]

    if period == 'custom':
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)")
        await state.set_state(MemoryStates.waiting_for_start_date)
        return

    if period == 'week':
        memories = await get_memories(callback.from_user.id, 'week')
        
    elif period == 'month':
        memories = await get_memories(callback.from_user.id, 'month')

    if not memories:
        await callback.message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    memories_cache[callback.from_user.id] = memories

    current_memory_index[callback.from_user.id] = 0
    await show_memory_card(callback.from_user.id, memories, 0)
    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
@dp.message(MemoryStates.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(start_date=start_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)")
        await state.set_state(MemoryStates.waiting_for_end_date)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pool)
@dp.message(MemoryStates.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        data = await state.get_data()
        start_date = data.get('start_date')

        if start_date > end_date:
            await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")
            return

        memories = await get_memories(
            message.from_user.id,
            start_date=start_date,
            end_date=end_date
        )

        if not memories:
            await message.answer("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        memories_cache[message.from_user.id] = memories
        current_memory_index[message.from_user.id] = 0
        await show_memory_card(message.from_user.id, memories, 0)
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º (—Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pool)
@dp.callback_query(F.data.startswith("memory_"))
async def handle_memory_navigation(callback: CallbackQuery):
    data = callback.data.split("_")
    direction = data[1]
    current_index = int(data[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ "–∫—ç—à–∞"
    memories = await get_memories_from_cache(user_id)
    if not memories:
        await callback.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    if direction == 'prev':
        new_index = current_index - 1
    else:
        new_index = current_index + 1

    current_memory_index[user_id] = new_index
    await callback.message.delete()
    await show_memory_card(user_id, memories, new_index)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.delete()
    await show_main_menu(callback.message)


async def get_events_from_cache(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫—ç—à–∞"""
    return events_cache.get(user_id)

async def get_memories_from_cache(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –∫—ç—à–∞"""
    return memories_cache.get(user_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î
async def main():
    global pool
    pool = await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())